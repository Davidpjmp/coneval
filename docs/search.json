[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R para el monitoreo de la política de desarrollo social",
    "section": "",
    "text": "El objetivo del curso es que las personas adscritas a la CGMEFFI desarrollen habilidades en el uso del software especializado “R” para fortalecer el análisis y potenciar el alcance de la información derivada del monitoreo de la política de desarrollo social.\n\n\n\n1. Manejo y procesamiento de datos\n1.1 Tipos y estructuras de datos\n1.2 Operaciones básicas\n1.3 Manejo de datos\n1.4 Ciclos, secuencias y condicionales\n1.5 Funciones\n2. Visualización de datos\n2.1 Generación de gráficas con ggplot\n2.2 Edición de gráficas con ggplot\n2.3 Visualización espacial\n2.4 Creación de tableros\n3. Análisis de texto\n3.1 Estructura y carga de datos\n3.2 Análisis de palabras\n3.3 Relación de texto\n\n\n\nLa metodología del curso consistirá en lo siguiente:\n1. La exposición de la facilitadora. Durante la primera parte de la sesión, se expondrán los comandos necesarios para llevar a cabo cada tema. Se dará una introducción sobre la temática y se buscará dar ejemplos concretos para facilitar el aprendizaje. Se espera que el personal exponga sus dudas o comentarios a lo largo de la explicación.\n2. Realización de ejercicios prácticos. Al final de cada sesión, corresponderá a las personas asistentes del curso realizar individualmente o en parejas un ejercicio relacionado con lo visto en la primera parte de la clase.\n3. Consulta autónoma de material. Tanto la exposición como los ejercicios serán acompañado de material de consulta realizado ad hoc para el curso y el contenido, de tal manera que el estudiantado pueda volver a los códigos y las explicaciones posteriormente.\n\n\n\n\n\nDoctora en Estudios de Población. Centro de Estudios Demográficos y Urbanos, El Colegio de México.\nSemblanza Profesora de tiempo completo en la Facultad de Ciencias Políticas y Sociales. Investigadora nivel I en elSistema Nacional de Investigadores. Maestra en Población y Desarrollo por la Facultad Latinoamericana de Ciencias Sociales (FLACSO) – Sede México. Posee experiencia en recolección de información estadística, diseño y control de procesos de recolección y su procesamiento. Ha aplicado diversos métodos y herramientas multivariadas, homologación de información y comparabilidad de fuentes en sus investigaciones, así como usa de diversos softwares estadísticos, y ha impartido clases de estadítica aplicada a nivel de licenciatura y posgrado. Es co-coordinadora del Capítulo de CDMX de la iniciativa RLadies.\n\n\n\nDoctora en Ciencia Política. Centro de Investigación y Docencia Económicas (CIDE) México.\nSemblanza Gerente de Información y Políticas Públicas en Sertech MX, asistente de docencia en FLACSO México y profesora de asignatura de Estadística en la UNAM. Maestra en Gobierno y Asuntos Públicos por la Facultad Latinoamericana de Ciencias Sociales (FLACSO) – Sede México. También se ha desempeñado como Analista de Datos Senior en ThinkData MX; como profesora de asignatura y adjunta de diversos cursos de métodos cuantitativos para el análisis de políticas públicas en la Universidad Autónoma de San Luis Potosí, FLACSO México, Centro de Investigación y Docencia Económicas (CIDE) y Universidad Nacional Autónoma de México (UNAM). Sus líneas de investigación son los estudios legislativos, análisis de políticas públicas a nivel local, instituciones y partidos políticos en América Latina."
  },
  {
    "objectID": "instala.html",
    "href": "instala.html",
    "title": "Instalación de R y Rstudio",
    "section": "",
    "text": "https://youtu.be/YkN5urybh2A Video en YouTube"
  },
  {
    "objectID": "instala.html#instalación-en-os",
    "href": "instala.html#instalación-en-os",
    "title": "Instalación de R y Rstudio",
    "section": "Instalación en OS",
    "text": "Instalación en OS\nhttps://youtu.be/icWV8jzYOtA Viedo en YouTube"
  },
  {
    "objectID": "instala.html#instalación-en-pc",
    "href": "instala.html#instalación-en-pc",
    "title": "Instalación de R y Rstudio",
    "section": "Instalación en PC",
    "text": "Instalación en PC\nhttps://youtu.be/TNSQikMfgJI Video en YouTube"
  },
  {
    "objectID": "instala.html#ojo",
    "href": "instala.html#ojo",
    "title": "Instalación de R y Rstudio",
    "section": "Ojo",
    "text": "Ojo\nPronto RStudio se volverá “posit”"
  },
  {
    "objectID": "P1.html",
    "href": "P1.html",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "",
    "text": "En RStudio podemos tener varias ventanas que nos permiten tener más control de nuestro “ambiente”, el historial, los “scripts” o códigos que escribimos y por supuesto, tenemos nuestra consola, que también tiene el símbolo “>” con R. Podemos pedir operaciones básicas\n\n2+5\n\n[1] 7\n\n5*3\n\n[1] 15\n\n#Para escribir comentarios y que no los lea como operaciones ponemos el símbolo de gato\n# Lo podemos hacer para un comentario en una línea o la par de una instrucción\n1:5               # Secuencia 1-5\n\n[1] 1 2 3 4 5\n\nseq(1, 10, 0.5)   # Secuencia con incrementos diferentes a 1\n\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n\nc('a','b','c')  # Vector con caracteres\n\n[1] \"a\" \"b\" \"c\"\n\n1:7             # Entero\n\n[1] 1 2 3 4 5 6 7\n\n40<80           # Valor logico\n\n[1] TRUE\n\n2+2 == 5        # Valor logico\n\n[1] FALSE\n\nT == TRUE       # T expresion corta de verdadero\n\n[1] TRUE\n\n\nR es un lenguaje de programación por objetos. Por lo cual vamos a tener objetos a los que se les asigna su contenido. Si usamos una flechita “<-” o “->” le estamos asignando algo al objeto que apunta la felcha.\n\nx <- 24         # Asignacion de valor 24 a la variable x para su uso posterior (OBJETO)\nx/2             # Uso posterior de variable u objeto x\n\n[1] 12\n\nx               # Imprime en pantalla el valor de la variable u objeto\n\n[1] 24\n\nx <- TRUE       # Asigna el valor logico TRUE a la variable x OJO: x toma el ultimo valor que se le asigna\nx\n\n[1] TRUE"
  },
  {
    "objectID": "P1.html#vectores",
    "href": "P1.html#vectores",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.2 Vectores",
    "text": "1.2 Vectores\nLos vectores son uno de los objetos más usados en R.\n\ny <- c(2,4,6)     # Vector numerico\ny <- c('Primaria', 'Secundaria') # Vector caracteres\n\nDado que poseen elementos, podemos también observar y hacer operaciones con sus elementos, usando “[ ]” para acceder a ellos\n\ny[2]              # Acceder al segundo valor del vector y\n\n[1] \"Secundaria\"\n\ny[3] <- 'Preparatoria y más' # Asigna valor a la tercera componente del vector\nsex <-1:2         # Asigna a la variable sex los valores 1 y 2\nnames(sex) <- c(\"Femenino\", \"Masculino\") # Asigna nombres al vector de elementos sexo\nsex[2]            # Segundo elemento del vector sex\n\nMasculino \n        2"
  },
  {
    "objectID": "P1.html#matrices",
    "href": "P1.html#matrices",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.3 Matrices",
    "text": "1.3 Matrices\nLas matrices son muy importantes, porque nos permiten hacer operaciones y casi todas nuestras bases de datos tendran un aspecto de matriz.\n\nm <- matrix (nrow=2, ncol=3, 1:6, byrow = TRUE) # Matrices Ejemplo 1\nm\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nm <- matrix (nrow=2, ncol=3, 1:6, byrow = FALSE) # Matrices Ejemplo 1\nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\ndim(m)\n\n[1] 2 3\n\nattributes(m)\n\n$dim\n[1] 2 3\n\nn <- 1:6     # Matrices Ejemplo 2\ndim(n) <- c(2,3)\nn\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nxx <-10:12   # Matrices Ejemplo 3\nyy<-14:16\ncbind(xx,yy) # Une vectores por Columnas\n\n     xx yy\n[1,] 10 14\n[2,] 11 15\n[3,] 12 16\n\nrbind(xx,yy) # Une vectores por Renglones\n\n   [,1] [,2] [,3]\nxx   10   11   12\nyy   14   15   16\n\nmi_matrix<-cbind(xx,yy) # este resultado lo puedo asignar a un objeto"
  },
  {
    "objectID": "P1.html#funciones",
    "href": "P1.html#funciones",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.4 Funciones",
    "text": "1.4 Funciones\nAlgunas funciones básicas son las siguientes. Vamos a ir viendo más funciones, pero para entender cómo funcionan, haremos unos ejemplos y cómo pedir ayuda sobre ellas.\n\nsum (10,20,30)    # Función suma\n\n[1] 60\n\nrep('R', times=3) # Repite la letra R el numero de veces que se indica\n\n[1] \"R\" \"R\" \"R\"\n\nsqrt(9)           # Raiz cuadrada de 9\n\n[1] 3"
  },
  {
    "objectID": "P1.html#ayuda",
    "href": "P1.html#ayuda",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.5 Ayuda",
    "text": "1.5 Ayuda\nPedir ayuda es indispensable para aprender a escribir nuestros códigos. A prueba y error, es el mejor sistema para aprender. Podemos usar la función help, example y ?\n\nhelp(sum)         # Ayuda sobre función sum\nexample(sum)      # Ejemplo de función sum\n\n\nsum> ## Pass a vector to sum, and it will add the elements together.\nsum> sum(1:5)\n[1] 15\n\nsum> ## Pass several numbers to sum, and it also adds the elements.\nsum> sum(1, 2, 3, 4, 5)\n[1] 15\n\nsum> ## In fact, you can pass vectors into several arguments, and everything gets added.\nsum> sum(1:2, 3:5)\n[1] 15\n\nsum> ## If there are missing values, the sum is unknown, i.e., also missing, ....\nsum> sum(1:5, NA)\n[1] NA\n\nsum> ## ... unless  we exclude missing values explicitly:\nsum> sum(1:5, NA, na.rm = TRUE)\n[1] 15"
  },
  {
    "objectID": "P1.html#mi-ambiente",
    "href": "P1.html#mi-ambiente",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.6 Mi ambiente",
    "text": "1.6 Mi ambiente\nTodos los objetos que hemos declarado hasta ahora son parte de nuestro “ambiente” (environment). Para saber qué está en nuestro ambiente usamos el comando\n\nls()\n\n[1] \"m\"         \"mi_matrix\" \"n\"         \"sex\"       \"x\"         \"xx\"       \n[7] \"y\"         \"yy\"       \n\ngc()           # Garbage collection, reporta memoria en uso\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  597426 32.0    1299204 69.4         NA  1299204 69.4\nVcells 1106241  8.5    8388608 64.0      16384  1839370 14.1\n\n\nPara borrar todos nuestros objetos, usamos el siguiente comando, que equivale a usar la escobita de la venta de environment\n\nrm(list=ls())  # Borrar objetos actuales"
  },
  {
    "objectID": "P1.html#directorio-de-trabajo",
    "href": "P1.html#directorio-de-trabajo",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.7 Directorio de trabajo",
    "text": "1.7 Directorio de trabajo\nEs muy útil saber dónde estamos trabajando y donde queremos trabajar. Por eso podemos utilizar los siguientes comandos para saberlo\nOjo, checa, si estás desdes una PC, cómo cambian las “” por”/” o por “\\”\n\ngetwd()           # Directorio actual\n\n[1] \"/Users/anaescoto/Dropbox/2022/Curso_r_cnvl/coneval\"\n\n#setwd(\"C:/Users/anaes/Dropbox/2021/CursoR-posgrado\")# Cambio de directorio\n\nlist.files()      # Lista de archivos en ese directorio\n\n [1] \"Icon\\r\"              \"LICENSE\"             \"Mi_Exportación.xlsx\"\n [4] \"P1.qmd\"              \"P1.rmarkdown\"        \"P2.qmd\"             \n [7] \"P3.qmd\"              \"P4.qmd\"              \"P5.qmd\"             \n[10] \"README.md\"           \"_quarto.yml\"         \"coneval.Rproj\"      \n[13] \"datos\"               \"docs\"                \"index.html\"         \n[16] \"index.qmd\"           \"instala.html\"        \"instala.qmd\"        \n[19] \"intro1.png\"          \"site_libs\"          \n\n\nChecar que esto también se puede hacer desde el menú:\n\n\n\ni0"
  },
  {
    "objectID": "P1.html#proyectos",
    "href": "P1.html#proyectos",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.8 Proyectos",
    "text": "1.8 Proyectos\nPero… a veces preferimos trabajar en proyectos, sobre todo porque nos da más control.\nHay gente que lo dice mejor que yo, como Hadley Wickham: https://es.r4ds.hadley.nz/flujo-de-trabajo-proyectos.html"
  },
  {
    "objectID": "P1.html#instalación-de-paquetes",
    "href": "P1.html#instalación-de-paquetes",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.9 Instalación de paquetes",
    "text": "1.9 Instalación de paquetes\nLos paquetes son útiles para realizar funciones especiales. La especialización de paquetes es más rápida en R que en otros programas por ser un software libre.\nVamos a instalar el paquete “foreign”, como su nombre lo indica, nos permite leer elementos “extranjeros” en R. Es sumamente útil porque nos permite leer casi todos los formatos, sin necesidad de usar paquetes especializados como StatTransfer.\nPara instalar las paqueterías usamos el siguiente comando “install.packages()” Checa que adentro del paréntesis va el nombre de la librería, con comillas.\nCon la opción “dependencies = TRUE” R nos instalará no sólo la librería o paquete que estamos pidiendo, sino todo aquellos paquetes que necesite la librería en cuestión. Muchas veces los diseños de los paquetes implican el uso de algún otro anterior. Por lo que poner esta sentencia nos puede ahorrar errores cuando estemos usando el paquete. Piensa que esto es similar a cuando enciendes tu computadora y tu sistema operativo te pide que mantengas las actualizaciones.\nVamos a instalar dos librerías que nos permiten importar formatos.\n\n#install.packages(\"foreign\", dependencies = TRUE)\n#install.packages(\"haven\", dependencies = TRUE)\n\nEste proceso no hay que hacerlo siempre. Si no sólo la primera vez. Una vez instalado un paquete de librería, la llamamos con el comando “library”\n\nlibrary(foreign)\nlibrary(haven)\n\n“foreing” nos permite leer archivos en formato de dBase, con extensión “.dbf”. Si bien no es un formato muy común para los investigadores, sí para los que generan la información, puesto que dBase es uno de los principales programas de administración de bases de datos.\nHe puesto un ejemplo de una base de datos mexicana en dbf, en este formato.\n\nejemplo_dbf<-read.dbf(\"datos/ejemplo_dbf.DBF\") #checa cómo nos vamos adentro de nuestro directorio"
  },
  {
    "objectID": "P1.html#paquete-pacman",
    "href": "P1.html#paquete-pacman",
    "title": "1  Primer acercamiento al uso del programa",
    "section": "1.10 Paquete pacman",
    "text": "1.10 Paquete pacman\nEn general, cuando hacemos nuestro código querremos verificar que nuestras librerías estén instaladas. Si actualizamos nuestro R y Rstudio es probable (sobre todo en MAC) que hayamos perdido alguno.\nEste es un ejemplo de un código. Y vamos a introducir un paquete muy útil llamado “pacman”\n\nif (!require(\"pacman\")) install.packages(\"pacman\") # instala pacman si se requiere\n\nLoading required package: pacman\n\npacman::p_load(tidyverse, readxl, writexl, haven, sjlabelled, foreign) #carga los paquetes necesarios para esta práctica\n\nHay muchos formatos de almacenamiento de bases de datos. Vamos a aprender a importar información desde ellos."
  },
  {
    "objectID": "P2.html",
    "href": "P2.html",
    "title": "2  Manejo de datos: importación, selección y revisión",
    "section": "",
    "text": "Vamos a llamar algunas librerías básicas, el tidyverse (que son muchas librerías) y sjlabelled que nos sirve para el manejo de etiquetas\n\nif (!require(\"pacman\")) install.packages(\"pacman\") # instala pacman si se requiere\n\nLoading required package: pacman\n\npacman::p_load(tidyverse, haven, sjlabelled, foreign, janitor) #carga los paquetes necesarios para esta práctica"
  },
  {
    "objectID": "P2.html#importación-de-datos",
    "href": "P2.html#importación-de-datos",
    "title": "2  Manejo de datos: importación, selección y revisión",
    "section": "2.2 Importación de datos",
    "text": "2.2 Importación de datos\n\n2.2.1 Desde Excel\nEl paquete más compatible con RStudio es readxl. A veces, otros paquetes tienen más problemas de configuración entre R y el Java.\n\nejemploxl <- readxl::read_excel(\"datos/ejemplo_xlsx.xlsx\", sheet = \"para_importar\")\n\nNew names:\n• `` -> `...128`\n• `` -> `...129`\n• `` -> `...132`\n• `PIB (Paridad de Poder Adquisitivo)` -> `PIB (Paridad de Poder\n  Adquisitivo)...135`\n• `PIB (Paridad de Poder Adquisitivo)` -> `PIB (Paridad de Poder\n  Adquisitivo)...136`\n• `PIB per cápita (Paridad de Poder Adquisitivo)` -> `PIB per cápita (Paridad\n  de Poder Adquisitivo)...137`\n• `PIB per cápita (Paridad de Poder Adquisitivo)` -> `PIB per cápita (Paridad\n  de Poder Adquisitivo)...138`\n• `PIB per cápita` -> `PIB per cápita...139`\n• `PIB per cápita` -> `PIB per cápita...140`\n• `PIB` -> `PIB...141`\n• `PIB` -> `PIB...142`\n\n\nComo el nombre de paquete lo indica, sólo lee. Para escribir en este formato, recomiendo el paquete “writexl”. Lo instalamos anteriormente.\nSi quisiéramos exportar un objeto a Excel\n\nwritexl::write_xlsx(ejemploxl, path = \"Mi_Exportación.xlsx\")\n\n\n\n2.2.2 Desde STATA y SPSS\nSi bien también se puede realizar desde el paquete foreign. Pero este no importa algunas características como las etiquetas y tampoco funciona con las versiones más nuevas de STATA. Vamos a instalar otro paquete, compatible con el mundo tidyverse.\nRecuerda que no hay que instalarlo (viene adentro de tidyverse). Se instalasólo la primera vez. Una vez instalado un paquete, lo llamamos con el comando “library”\n\nconcentrado2020 <- haven::read_dta(\"datos/concentrado2020.dta\")\n\n!Importante, a R no le gustan los objetos con nombres que empiezan en números\nEl paquete haven sí exporta información.\n\nhaven::write_dta(concentrado2020, \"datos/mi_exportación.dta\", version = 12)\n\nCon SSPS es muy parecido. Dentro de “haven” hay una función específica para ello.\n\n#encevi_hogar<- haven::read_sav(\"datos/encevi_hogar.sav\")\n\nPara escribir\n\n#haven::write_sav(concentrado2020 , \"mi_exportacion.sav\")\n\nCheca que en todas las exportaciones en los nombres hay que incluir la extensión del programa. Si quieres guardar en un lugar diferente al directorio del trabajo, hay que escribir toda la ruta dentro de la computadora."
  },
  {
    "objectID": "P2.html#revisión-de-nuestra-base",
    "href": "P2.html#revisión-de-nuestra-base",
    "title": "2  Manejo de datos: importación, selección y revisión",
    "section": "2.3 Revisión de nuestra base",
    "text": "2.3 Revisión de nuestra base\nVamos a revisar la base, brevemente la base\n\nclass(concentrado2020) # tipo de objeto\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nnames(concentrado2020) # lista las variables\n\n  [1] \"folioviv\"   \"foliohog\"   \"ubica_geo\"  \"tam_loc\"    \"est_socio\" \n  [6] \"est_dis\"    \"upm\"        \"factor\"     \"clase_hog\"  \"sexo_jefe\" \n [11] \"edad_jefe\"  \"educa_jefe\" \"tot_integ\"  \"hombres\"    \"mujeres\"   \n [16] \"mayores\"    \"menores\"    \"p12_64\"     \"p65mas\"     \"ocupados\"  \n [21] \"percep_ing\" \"perc_ocupa\" \"ing_cor\"    \"ingtrab\"    \"trabajo\"   \n [26] \"sueldos\"    \"horas_extr\" \"comisiones\" \"aguinaldo\"  \"indemtrab\" \n [31] \"otra_rem\"   \"remu_espec\" \"negocio\"    \"noagrop\"    \"industria\" \n [36] \"comercio\"   \"servicios\"  \"agrope\"     \"agricolas\"  \"pecuarios\" \n [41] \"reproducc\"  \"pesca\"      \"otros_trab\" \"rentas\"     \"utilidad\"  \n [46] \"arrenda\"    \"transfer\"   \"jubilacion\" \"becas\"      \"donativos\" \n [51] \"remesas\"    \"bene_gob\"   \"transf_hog\" \"trans_inst\" \"estim_alqu\"\n [56] \"otros_ing\"  \"gasto_mon\"  \"alimentos\"  \"ali_dentro\" \"cereales\"  \n [61] \"carnes\"     \"pescado\"    \"leche\"      \"huevo\"      \"aceites\"   \n [66] \"tuberculo\"  \"verduras\"   \"frutas\"     \"azucar\"     \"cafe\"      \n [71] \"especias\"   \"otros_alim\" \"bebidas\"    \"ali_fuera\"  \"tabaco\"    \n [76] \"vesti_calz\" \"vestido\"    \"calzado\"    \"vivienda\"   \"alquiler\"  \n [81] \"pred_cons\"  \"agua\"       \"energia\"    \"limpieza\"   \"cuidados\"  \n [86] \"utensilios\" \"enseres\"    \"salud\"      \"atenc_ambu\" \"hospital\"  \n [91] \"medicinas\"  \"transporte\" \"publico\"    \"foraneo\"    \"adqui_vehi\"\n [96] \"mantenim\"   \"refaccion\"  \"combus\"     \"comunica\"   \"educa_espa\"\n[101] \"educacion\"  \"esparci\"    \"paq_turist\" \"personales\" \"cuida_pers\"\n[106] \"acces_pers\" \"otros_gas\"  \"transf_gas\" \"percep_tot\" \"retiro_inv\"\n[111] \"prestamos\"  \"otras_perc\" \"ero_nm_viv\" \"ero_nm_hog\" \"erogac_tot\"\n[116] \"cuota_viv\"  \"mater_serv\" \"material\"   \"servicio\"   \"deposito\"  \n[121] \"prest_terc\" \"pago_tarje\" \"deudas\"     \"balance\"    \"otras_erog\"\n[126] \"smg\"       \n\nhead(concentrado2020) # muestra las primeras 6 líneas\n\n# A tibble: 6 × 126\n  folioviv  folio…¹ ubica…² tam_loc est_s…³ est_dis upm   factor clase…⁴ sexo_…⁵\n  <chr>     <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  <dbl> <chr>   <chr>  \n1 01000136… 1       01001   1       3       002     0000…    190 2       2      \n2 01000136… 1       01001   1       3       002     0000…    190 2       1      \n3 01000178… 1       01001   1       3       002     0000…    189 2       1      \n4 01000178… 1       01001   1       3       002     0000…    189 2       1      \n5 01000178… 1       01001   1       3       002     0000…    189 2       1      \n6 01000178… 1       01001   1       3       002     0000…    189 2       1      \n# … with 116 more variables: edad_jefe <dbl>, educa_jefe <chr>,\n#   tot_integ <dbl>, hombres <dbl>, mujeres <dbl>, mayores <dbl>,\n#   menores <dbl>, p12_64 <dbl>, p65mas <dbl>, ocupados <dbl>,\n#   percep_ing <dbl>, perc_ocupa <dbl>, ing_cor <dbl>, ingtrab <dbl>,\n#   trabajo <dbl>, sueldos <dbl>, horas_extr <dbl>, comisiones <dbl>,\n#   aguinaldo <dbl>, indemtrab <dbl>, otra_rem <dbl>, remu_espec <dbl>,\n#   negocio <dbl>, noagrop <dbl>, industria <dbl>, comercio <dbl>, …\n\ntable(concentrado2020$clase_hog) # un tabulado simple\n\n\n    1     2     3     4     5 \n10842 55339 21819   717   289"
  },
  {
    "objectID": "P2.html#revisión-con-dplyr",
    "href": "P2.html#revisión-con-dplyr",
    "title": "2  Manejo de datos: importación, selección y revisión",
    "section": "2.4 Revisión con dplyr",
    "text": "2.4 Revisión con dplyr\nOperador de “pipe” o “tubería” %>% (Ctrl+Shift+M) Antes de continuar, presentemos el operador “pipe” %>%. dplyr importa este operador de otro paquete (magrittr). Este operador le permite canalizar la salida de una función a la entrada de otra función. En lugar de funciones de anidamiento (lectura desde adentro hacia afuera), la idea de la tubería es leer las funciones de izquierda a derecha.\n\nconcentrado2020 %>% \n    dplyr::select(sexo_jefe, edad_jefe) %>% \n    head\n\n# A tibble: 6 × 2\n  sexo_jefe edad_jefe\n  <chr>         <dbl>\n1 2                48\n2 1                46\n3 1                26\n4 1                29\n5 1                63\n6 1                33\n\n\n\nconcentrado2020 %>% \n    dplyr::select(sexo_jefe, edad_jefe) %>% \n    glimpse\n\nRows: 89,006\nColumns: 2\n$ sexo_jefe <chr> \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"2\", …\n$ edad_jefe <dbl> 48, 46, 26, 29, 63, 33, 60, 76, 74, 37, 76, 79, 37, 80, 46, …"
  },
  {
    "objectID": "P2.html#etiquetas-y-cómo-usarlas",
    "href": "P2.html#etiquetas-y-cómo-usarlas",
    "title": "2  Manejo de datos: importación, selección y revisión",
    "section": "2.5 Etiquetas y cómo usarlas",
    "text": "2.5 Etiquetas y cómo usarlas\nPodemos ver que los objetos “data.frame”(spoiler, ya hablaremos de ellos)\n\nclass(concentrado2020$sexo_jefe)\n\n[1] \"character\"\n\n\n\n2.5.1 Ejemplo de etiquetado\nPara que se vea mejor nuestro tabulado, sería bueno que nuestras variables tuvieran etiqueta. Para ello utilizaremos el paquete “sjlabelled”\n\netiqueta_sex<-c(\"Hombre\", \"Mujer\")\n\nconcentrado2020<-concentrado2020 %>% \n  mutate(sexo_jefe=as_numeric(sexo_jefe)) %>% # para quitar el \"string\"\n  sjlabelled::set_labels(sexo_jefe, labels=etiqueta_sex) \n\nEtiquetemos también la variable “clase_hog”. Podemos checar cómo está estructurada esta base acá https://www.inegi.org.mx/rnm/index.php/catalog/685/data-dictionary\n\nconcentrado2020<-concentrado2020 %>% \n  mutate(clase_hog=as_numeric(clase_hog)) %>% # para quitar el \"string\"\n  sjlabelled::set_labels(clase_hog, labels=c(\"unipersonal\",\n                                             \"nuclear\", \n                                             \"ampliado\",\n                                             \"compuesto\",\n                                             \"corresidente\")) \n\n\ntable(concentrado2020$sexo_jefe)\n\n\n    1     2 \n63230 25776 \n\ntable(sjlabelled::as_label(concentrado2020$sexo_jefe))\n\n\nHombre  Mujer \n 63230  25776 \n\n\n\n\n2.5.2 Ojeando\n\ndplyr::glimpse(concentrado2020)\n\nRows: 89,006\nColumns: 126\n$ folioviv   <chr> \"0100013605\", \"0100013606\", \"0100017801\", \"0100017802\", \"01…\n$ foliohog   <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\",…\n$ ubica_geo  <chr> \"01001\", \"01001\", \"01001\", \"01001\", \"01001\", \"01001\", \"0100…\n$ tam_loc    <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\",…\n$ est_socio  <chr> \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\", \"3\",…\n$ est_dis    <chr> \"002\", \"002\", \"002\", \"002\", \"002\", \"002\", \"002\", \"002\", \"00…\n$ upm        <chr> \"0000001\", \"0000001\", \"0000002\", \"0000002\", \"0000002\", \"000…\n$ factor     <dbl> 190, 190, 189, 189, 189, 189, 189, 168, 168, 168, 168, 168,…\n$ clase_hog  <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 3, 3, 2, 3, 5, 2,…\n$ sexo_jefe  <dbl> 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1,…\n$ edad_jefe  <dbl> 48, 46, 26, 29, 63, 33, 60, 76, 74, 37, 76, 79, 37, 80, 46,…\n$ educa_jefe <chr> \"09\", \"08\", \"10\", \"08\", \"10\", \"06\", \"03\", \"08\", \"03\", \"06\",…\n$ tot_integ  <dbl> 3, 4, 2, 2, 2, 4, 3, 2, 2, 6, 6, 1, 1, 1, 2, 3, 3, 2, 2, 5,…\n$ hombres    <dbl> 1, 3, 1, 2, 1, 2, 2, 1, 1, 3, 4, 0, 1, 0, 0, 2, 1, 1, 2, 3,…\n$ mujeres    <dbl> 2, 1, 1, 0, 1, 2, 1, 1, 1, 3, 2, 1, 0, 1, 2, 1, 2, 1, 0, 2,…\n$ mayores    <dbl> 3, 3, 2, 1, 2, 2, 3, 2, 2, 3, 6, 1, 1, 1, 2, 3, 2, 2, 2, 5,…\n$ menores    <dbl> 0, 1, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,…\n$ p12_64     <dbl> 3, 3, 2, 1, 2, 2, 3, 0, 0, 3, 4, 0, 1, 0, 2, 1, 2, 1, 2, 5,…\n$ p65mas     <dbl> 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 1, 0, 1, 0, 2, 0, 1, 0, 0,…\n$ ocupados   <dbl> 1, 1, 2, 1, 1, 1, 1, 0, 1, 3, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2,…\n$ percep_ing <dbl> 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 5, 1, 1, 1, 1, 2, 1, 2, 2, 3,…\n$ perc_ocupa <dbl> 1, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2,…\n$ ing_cor    <dbl> 16229.49, 31425.68, 33979.16, 71557.37, 90703.26, 30368.84,…\n$ ingtrab    <dbl> 13278.68, 22254.09, 33979.16, 71557.37, 48113.11, 30368.84,…\n$ trabajo    <dbl> 0.00, 22254.09, 24098.35, 71557.37, 48113.11, 30368.84, 148…\n$ sueldos    <dbl> 0.00, 21639.34, 23606.55, 67868.85, 47213.11, 29508.19, 140…\n$ horas_extr <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ comisiones <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ aguinaldo  <dbl> 0.00, 614.75, 491.80, 3688.52, 0.00, 860.65, 737.70, 0.00, …\n$ indemtrab  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ otra_rem   <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ remu_espec <dbl> 0.00, 0.00, 0.00, 0.00, 900.00, 0.00, 0.00, 0.00, 0.00, 0.0…\n$ negocio    <dbl> 1573.77, 0.00, 9880.81, 0.00, 0.00, 0.00, 0.00, 0.00, 8659.…\n$ noagrop    <dbl> 1573.77, 0.00, 9880.81, 0.00, 0.00, 0.00, 0.00, 0.00, 8659.…\n$ industria  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ comercio   <dbl> 1573.77, 0.00, 9880.81, 0.00, 0.00, 0.00, 0.00, 0.00, 8659.…\n$ servicios  <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ agrope     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ agricolas  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ pecuarios  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ reproducc  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ pesca      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ otros_trab <dbl> 11704.91, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0…\n$ rentas     <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 15497…\n$ utilidad   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 154979, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ arrenda    <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ transfer   <dbl> 2459.01, 1671.59, 0.00, 0.00, 22131.14, 0.00, 25967.21, 130…\n$ jubilacion <dbl> 0.00, 0.00, 0.00, 0.00, 22131.14, 0.00, 25967.21, 7336.95, …\n$ becas      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ donativos  <dbl> 885.24, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 29.34, 0.…\n$ remesas    <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ bene_gob   <dbl> 1573.77, 1573.77, 0.00, 0.00, 0.00, 0.00, 0.00, 5086.95, 10…\n$ transf_hog <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 606.51, 0.00, 0.0…\n$ trans_inst <dbl> 0.00, 97.82, 0.00, 0.00, 0.00, 0.00, 0.00, 58.69, 0.00, 0.0…\n$ estim_alqu <dbl> 0.00, 7500.00, 0.00, 0.00, 18000.00, 0.00, 12000.00, 11612.…\n$ otros_ing  <dbl> 491.80, 0.00, 0.00, 0.00, 2459.01, 0.00, 0.00, 0.00, 0.00, …\n$ gasto_mon  <dbl> 24626.04, 20397.10, 44955.73, 82950.42, 30140.68, 39991.94,…\n$ alimentos  <dbl> 14732.80, 9321.32, 15081.32, 26921.53, 11969.93, 7547.03, 1…\n$ ali_dentro <dbl> 13549.96, 9321.32, 9295.63, 22164.39, 3355.69, 7547.03, 112…\n$ cereales   <dbl> 3990.78, 1324.26, 1594.26, 2441.54, 0.00, 1529.96, 1259.98,…\n$ carnes     <dbl> 989.99, 3882.84, 0.00, 4513.33, 3034.27, 4204.25, 2031.41, …\n$ pescado    <dbl> 0.00, 0.00, 0.00, 1025.87, 0.00, 0.00, 771.42, 0.00, 0.00, …\n$ leche      <dbl> 1613.54, 925.71, 0.00, 449.99, 321.42, 321.42, 2494.25, 707…\n$ huevo      <dbl> 822.85, 745.70, 925.71, 0.00, 0.00, 244.28, 642.85, 0.00, 0…\n$ aceites    <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 1067.13, 0.00, 0.00, 0.00, 0.…\n$ tuberculo  <dbl> 347.14, 0.00, 0.00, 197.48, 0.00, 0.00, 0.00, 411.42, 0.00,…\n$ verduras   <dbl> 655.70, 1157.10, 385.71, 2413.26, 0.00, 0.00, 1896.37, 3439…\n$ frutas     <dbl> 0.00, 0.00, 0.00, 1367.85, 0.00, 0.00, 642.85, 1504.25, 0.0…\n$ azucar     <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ cafe       <dbl> 925.71, 0.00, 0.00, 86.52, 0.00, 0.00, 0.00, 77.14, 0.00, 0…\n$ especias   <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ otros_alim <dbl> 3304.26, 1285.71, 3278.56, 9668.55, 0.00, 179.99, 1542.85, …\n$ bebidas    <dbl> 899.99, 0.00, 3111.39, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ ali_fuera  <dbl> 1182.84, 0.00, 5785.69, 4757.14, 8614.24, 0.00, 0.00, 0.00,…\n$ tabaco     <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ vesti_calz <dbl> 0.00, 0.00, 1006.60, 4509.73, 0.00, 371.73, 0.00, 215.21, 0…\n$ vestido    <dbl> 0.00, 0.00, 1006.60, 4294.52, 0.00, 0.00, 0.00, 215.21, 0.0…\n$ calzado    <dbl> 0.00, 0.00, 0.00, 215.21, 0.00, 371.73, 0.00, 0.00, 0.00, 0…\n$ vivienda   <dbl> 2850.00, 2308.50, 11097.00, 13984.50, 3179.50, 12450.00, 34…\n$ alquiler   <dbl> 0.00, 0.00, 9000.00, 12000.00, 0.00, 10500.00, 0.00, 0.00, …\n$ pred_cons  <dbl> 0.0, 0.0, 0.0, 0.0, 212.5, 0.0, 300.0, 100.0, 100.0, 150.0,…\n$ agua       <dbl> 750.00, 990.00, 420.00, 756.00, 408.00, 1500.00, 600.00, 39…\n$ energia    <dbl> 2100.00, 1318.50, 1677.00, 1228.50, 2559.00, 450.00, 2550.0…\n$ limpieza   <dbl> 375.00, 924.00, 2530.16, 708.00, 920.80, 408.00, 845.73, 72…\n$ cuidados   <dbl> 375.00, 924.00, 2403.00, 708.00, 429.00, 408.00, 699.00, 72…\n$ utensilios <dbl> 0.00, 0.00, 39.13, 0.00, 0.00, 0.00, 146.73, 0.00, 0.00, 0.…\n$ enseres    <dbl> 0.00, 0.00, 88.03, 0.00, 491.80, 0.00, 0.00, 0.00, 0.00, 0.…\n$ salud      <dbl> 0.00, 782.60, 4509.77, 39.13, 2412.39, 229.87, 213.25, 309.…\n$ atenc_ambu <dbl> 0.00, 782.60, 3913.04, 0.00, 0.00, 229.87, 0.00, 309.12, 0.…\n$ hospital   <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ medicinas  <dbl> 0.00, 0.00, 596.73, 39.13, 2412.39, 0.00, 213.25, 0.00, 426…\n$ transporte <dbl> 5447.24, 4915.68, 7029.68, 7022.39, 7154.75, 16171.31, 4200…\n$ publico    <dbl> 1812.82, 1465.68, 514.28, 899.99, 0.00, 1594.27, 0.00, 1092…\n$ foraneo    <dbl> 634.42, 0.00, 1475.40, 1475.40, 0.00, 0.00, 0.00, 0.00, 0.0…\n$ adqui_vehi <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 7377.04, 0.00, 0.00, 0.00, 0.…\n$ mantenim   <dbl> 0.00, 1200.00, 3000.00, 0.00, 6014.75, 1950.00, 3000.00, 11…\n$ refaccion  <dbl> 0.00, 0.00, 0.00, 0.00, 2114.75, 0.00, 0.00, 538.04, 0.00, …\n$ combus     <dbl> 0.00, 1200.00, 3000.00, 0.00, 3900.00, 1950.00, 3000.00, 58…\n$ comunica   <dbl> 3000.00, 2250.00, 2040.00, 4647.00, 1140.00, 5250.00, 1200.…\n$ educa_espa <dbl> 120.00, 0.00, 693.44, 26408.75, 1440.00, 1035.00, 0.00, 0.0…\n$ educacion  <dbl> 120.00, 0.00, 0.00, 7650.00, 0.00, 1035.00, 0.00, 0.00, 0.0…\n$ esparci    <dbl> 0.00, 0.00, 693.44, 13840.72, 1440.00, 0.00, 0.00, 0.00, 0.…\n$ paq_turist <dbl> 0.00, 0.00, 0.00, 4918.03, 0.00, 0.00, 0.00, 0.00, 0.00, 0.…\n$ personales <dbl> 1101.00, 2145.00, 2766.78, 2767.30, 112.50, 1779.00, 521.50…\n$ cuida_pers <dbl> 1101.00, 2145.00, 2082.00, 2601.00, 0.00, 1029.00, 384.00, …\n$ acces_pers <dbl> 0.00, 0.00, 684.78, 166.30, 0.00, 0.00, 0.00, 0.00, 0.00, 1…\n$ otros_gas  <dbl> 0.00, 0.00, 0.00, 0.00, 112.50, 750.00, 137.50, 125.00, 0.0…\n$ transf_gas <dbl> 0.00, 0.00, 240.98, 589.09, 2950.81, 0.00, 0.00, 386.40, 0.…\n$ percep_tot <dbl> 0.00, 2571.42, 6014.03, 1799.99, 4885.71, 5528.56, 0.00, 22…\n$ retiro_inv <dbl> 0.00, 0.00, 3442.61, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.…\n$ prestamos  <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ otras_perc <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 48.91, 0.00, 2445…\n$ ero_nm_viv <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ ero_nm_hog <dbl> 0.00, 2571.42, 2571.42, 1799.99, 4885.71, 5528.56, 0.00, 22…\n$ erogac_tot <dbl> 0.00, 2360.65, 1062.28, 885.24, 5901.63, 0.00, 0.00, 0.00, …\n$ cuota_viv  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ mater_serv <dbl> 0.00, 0.00, 78.68, 0.00, 0.00, 0.00, 0.00, 0.00, 29.34, 0.0…\n$ material   <dbl> 0.00, 0.00, 78.68, 0.00, 0.00, 0.00, 0.00, 0.00, 29.34, 0.0…\n$ servicio   <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ deposito   <dbl> 0.00, 0.00, 983.60, 0.00, 5901.63, 0.00, 0.00, 0.00, 0.00, …\n$ prest_terc <dbl> 0.00, 0.00, 0.00, 885.24, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0…\n$ pago_tarje <dbl> 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,…\n$ deudas     <dbl> 0.00, 2360.65, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.…\n$ balance    <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ otras_erog <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ smg        <dbl> 11089.8, 11089.8, 11089.8, 11089.8, 11089.8, 11089.8, 11089…\n\ndplyr::glimpse(concentrado2020[,20:30]) # en corchete del lado derecho podemos ojear columnas \n\nRows: 89,006\nColumns: 11\n$ ocupados   <dbl> 1, 1, 2, 1, 1, 1, 1, 0, 1, 3, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2,…\n$ percep_ing <dbl> 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 5, 1, 1, 1, 1, 2, 1, 2, 2, 3,…\n$ perc_ocupa <dbl> 1, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2,…\n$ ing_cor    <dbl> 16229.49, 31425.68, 33979.16, 71557.37, 90703.26, 30368.84,…\n$ ingtrab    <dbl> 13278.68, 22254.09, 33979.16, 71557.37, 48113.11, 30368.84,…\n$ trabajo    <dbl> 0.00, 22254.09, 24098.35, 71557.37, 48113.11, 30368.84, 148…\n$ sueldos    <dbl> 0.00, 21639.34, 23606.55, 67868.85, 47213.11, 29508.19, 140…\n$ horas_extr <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ comisiones <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ aguinaldo  <dbl> 0.00, 614.75, 491.80, 3688.52, 0.00, 860.65, 737.70, 0.00, …\n$ indemtrab  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\nPodemos hacer un tipo “labelbook”, usando una función que viene de la librería “sjlabelled”, “get_labels”. Funciona para toda la base o para columnas, o para variables.\n\n#print(get_labels(concentrado2020)) #todas\nprint(get_labels(concentrado2020[, 20:30])) #de las segundas 10 variables\n\n$ocupados\nNULL\n\n$percep_ing\nNULL\n\n$perc_ocupa\nNULL\n\n$ing_cor\nNULL\n\n$ingtrab\nNULL\n\n$trabajo\nNULL\n\n$sueldos\nNULL\n\n$horas_extr\nNULL\n\n$comisiones\nNULL\n\n$aguinaldo\nNULL\n\n$indemtrab\nNULL\n\n\nNo tienen :(\nEn singular nos da las etiquetas de las variables, no de los valores:\n\n#print(get_label(concentrado2020)) #todas\nprint(get_label(concentrado2020[, 1:10])) #de las primeras 10 variables\n\n                      folioviv                       foliohog \n\"Identificador de la vivienda\"      \"Identificador del hogar\" \n                     ubica_geo                        tam_loc \n        \"Ubicación geográfica\"          \"Tamaño de localidad\" \n                     est_socio                        est_dis \n      \"Estrato socioeconómico\"   \"Estrato de diseño muestral\" \n                           upm                         factor \n \"Unidad primaria de muestreo\"          \"Factor de expansión\" \n                     clase_hog                      sexo_jefe \n              \"Clase de hogar\"      \"Sexo del jefe del hogar\" \n\nprint(get_label(concentrado2020$clase_hog)) #\n\n[1] \"Clase de hogar\"\n\n\n\n\n2.5.3 Selección de casos y de variables\nPoco a poco vamos comprendiendo más la lógica de R. Hay varias “formas” de programar. Por lo que no te asustes si varios códigos llegan al mismo resultado\nPara revisar el contenido de un data frame podemos usar, como lo hicimos anteriormente, el formato basededatos$var o usar corchete, checa como estas cuatro formas tan el mismo resultado.\n\nx<-concentrado2020$ing_cor\nx<-concentrado2020[[\"ing_cor\"]]  # ¡Ojo con las comillas! \nx<-concentrado2020[,23]\nx<-concentrado2020[,\"ing_cor\"]\n\nAhora, con el formato de dplyr podemos llegar a lo mismo\n\nx<-concentrado2020 %>% \n  select(ing_cor)"
  },
  {
    "objectID": "P2.html#subsetting",
    "href": "P2.html#subsetting",
    "title": "2  Manejo de datos: importación, selección y revisión",
    "section": "2.6 “Subsetting”",
    "text": "2.6 “Subsetting”\nSelección “inversa” O sea no “botar algo”, es con el negativo. No funciona con todos los formatos\n\nx<-concentrado2020 %>% \n  select(-ing_cor)\n\nrm(x) #rm sólo bota objetos\n\nPero con los otros formatos podemos “asignar” valores adentro de un data.frame, y uno de eso valores puede ser “la nada””\n\nconcentrado2020$aproba2<-concentrado2020$ing_cor\nconcentrado2020$aproba2<-NULL\n\nDe aquí viene esa cuesta en el aprendizaje; tenemos que comprender en qué forma programó el que hizo la librería e incluso a veces cómo aprendió quién te está enseñando o el foro que estás leyendo.\nRara vez utilizamos una base de datos completa, y rara vez queremos hacer operaciones completas con ellas.\nVamos a pedir cosas más específicas y podemos seleccionar observaciones o filas. Como nuestra base de datos es muy grande, guardaremos el filtro o selección en un objeto.\n\nsubset1<-concentrado2020[concentrado2020$ing_cor>5000,]\n\nTambién podemos seleccionar columnas\n\nsubset2<- concentrado2020[, c(\"sexo_jefe\", \"edad_jefe\", \"ing_cor\")]\n\npodemos combinar los dos tipos de selección\n\nsubset3<- concentrado2020[(concentrado2020$ing_cor>5000 & concentrado2020$sexo_jefe==1 ), c(\"sexo_jefe\", \"edad_jefe\", \"ing_cor\")]\n\nCon dplyr, podemos usar “filter” y “select”\n\nsubset4<-concentrado2020 %>% \n  dplyr::filter(ing_cor>5000 & sexo_jefe==1) %>%\n    dplyr::select(sexo_jefe, edad_jefe, ing_cor)"
  },
  {
    "objectID": "P3.html",
    "href": "P3.html",
    "title": "3  Análisis descriptivo básico",
    "section": "",
    "text": "Desde el portal https://datos.gob.mx/ tenemos acceso a directo a varias fuentes de información, al ser datos abiertos, los archivos de texto son muy comunes.\nLeeremos parte de esa información, específicamente la de CONAPO https://datos.gob.mx/busca/dataset/proyecciones-de-la-poblacion-de-mexico-y-de-las-entidades-federativas-2016-2050\nEn estas bases hay acentos y otros carecteres especiales del español, por lo que agregaremos una opción de “encoding”, de lo contrario da error.\n\nmig_inter_quin_proyecciones <- read.csv(\"http://www.conapo.gob.mx/work/models/CONAPO/Datos_Abiertos/Proyecciones2018/mig_inter_quin_proyecciones.csv\", encoding=\"latin1\")\n#View(mig_inter_quin_proyecciones)\nnames(mig_inter_quin_proyecciones)\n\n[1] \"RENGLON\"     \"AÑO\"         \"ENTIDAD\"     \"CVE_GEO\"     \"EDAD\"       \n[6] \"SEXO\"        \"EMIGRANTES\"  \"INMIGRANTES\""
  },
  {
    "objectID": "P3.html#análisis-descriptivo-básico",
    "href": "P3.html#análisis-descriptivo-básico",
    "title": "3  Análisis descriptivo básico",
    "section": "3.2 Análisis descriptivo básico",
    "text": "3.2 Análisis descriptivo básico\nVamos a llamar algunas librerías básicas, el tidyverse (que son muchas librerías) y sjlabelled que nos sirve para el manejo de etiquetas\n\nif (!require(\"pacman\")) install.packages(\"pacman\") # instala pacman si se requiere\n\nLoading required package: pacman\n\npacman::p_load(tidyverse, haven, sjlabelled, foreign, janitor) #carga los paquetes necesarios para esta práctica\n\nE importamos la base\n\nconcentrado2020 <- haven::read_dta(\"datos/concentrado2020.dta\")"
  },
  {
    "objectID": "P3.html#variables-nominales",
    "href": "P3.html#variables-nominales",
    "title": "3  Análisis descriptivo básico",
    "section": "3.3 Variables nominales",
    "text": "3.3 Variables nominales\nLa variable nominal “sexo_jefe”, se captura con “1” para hombres y con un “2” para mujeres en la base de datos. Podemos establecer una operación de igual y además sumar los casos que cumplan con esta condición:\n\nconcentrado2020 %>% \n  dplyr::count(sexo_jefe==2) # cuentan los casos que cumplen con la condición \"sexo_jefe==2\"\n\n# A tibble: 2 × 2\n  `sexo_jefe == 2`     n\n  <lgl>            <int>\n1 FALSE            63230\n2 TRUE             25776\n\n\nEsto es a lo que nos referimos con contar frecuencias. Podemos contar casos que cumplan con una operación de igualdad.\n\nconcentrado2020 %>%\n  with(\n    table(sexo_jefe)\n    )\n\nsexo_jefe\n    1     2 \n63230 25776 \n\n\n\n3.3.1 Recordemos nuestro etiquetado\n\netiqueta_sex<-c(\"Hombre\", \"Mujer\")\n\nconcentrado2020<-concentrado2020 %>% \n  mutate(sexo_jefe=as_numeric(sexo_jefe)) %>% # para quitar el \"string\"\n  sjlabelled::set_labels(sexo_jefe, labels=etiqueta_sex) \n\n\nconcentrado2020<-concentrado2020 %>% \n  mutate(clase_hog=as_numeric(clase_hog)) %>% # para quitar el \"string\"\n  sjlabelled::set_labels(clase_hog, labels=c(\"unipersonal\",\n                                             \"nuclear\", \n                                             \"ampliado\",\n                                             \"compuesto\",\n                                             \"corresidente\")) \n\nCon “tabyl()”” de “janitor””\n\nconcentrado2020 %>%\n  dplyr::mutate(sexo_jefe=as_label(sexo_jefe))  %>%\n  janitor::tabyl(sexo_jefe)\n\n sexo_jefe     n   percent\n    Hombre 63230 0.7104015\n     Mujer 25776 0.2895985\n\n\nPara ver que esto es una distribución de frecuencias sería muy útil ver la proporción total, ello se realiza agregando un elemento más en nuestro código con una “tubería”:\n\nconcentrado2020 %>% \n  dplyr::mutate(sexo_jefe=as_label(sexo_jefe))  %>%\n  janitor::tabyl(sexo_jefe) %>% \n  janitor::adorn_totals()\n\n sexo_jefe     n   percent\n    Hombre 63230 0.7104015\n     Mujer 25776 0.2895985\n     Total 89006 1.0000000\n\n\nHoy revisamos algunos tipos de variables\n\nclass(concentrado2020$sexo_jefe) # variable sin etiqueta\n\n[1] \"numeric\"\n\nclass(as_label(concentrado2020$sexo_jefe)) # variable con etiqueta\n\n[1] \"factor\"\n\nclass(as_label(concentrado2020$educa_jefe)) # variable ordinal\n\n[1] \"character\"\n\nclass(concentrado2020$ing_cor) # variable de intervalo/razón\n\n[1] \"numeric\"\n\n\nEn general, tendremos variables de factor que podrían ser consideradas como cualitativas y numéricas. Aunque en realidad, R tiene muchas formas de almacenamiento. Como mostramos con el comando “glimpse()” en la práctica anterior, podemos revisar una variable en específico:\n\ndplyr::glimpse(concentrado2020$sexo_jefe)\n\n num [1:89006] 2 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"labels\")= Named num [1:2] 1 2\n  ..- attr(*, \"names\")= chr [1:2] \"Hombre\" \"Mujer\"\n - attr(*, \"label\")= chr \"Sexo del jefe del hogar\"\n\n\n\nconcentrado2020 %>% mutate(sexo_jefe=as_label(sexo_jefe)) %>% # cambia los valores de la variable a sus etiquetas\n                tabyl(sexo_jefe) %>% # para hacer la tabla\n                adorn_totals() %>% # añade totales\n                adorn_pct_formatting()  # nos da porcentaje en lugar de proporción\n\n sexo_jefe     n percent\n    Hombre 63230   71.0%\n     Mujer 25776   29.0%\n     Total 89006  100.0%\n\n\nLa tubería o “pipe” %>% nos permite ir agregando elementos de manera sencilla nuestros comandos. En este caso decimos que dentro del objeto haga el cambio, luego la tabla, que le ponga porcentajes y finalmente que nos dé los totales. El total del 100% no aparece, por un elemento propio del programa."
  },
  {
    "objectID": "P3.html#variables-ordinales",
    "href": "P3.html#variables-ordinales",
    "title": "3  Análisis descriptivo básico",
    "section": "3.4 Variables ordinales",
    "text": "3.4 Variables ordinales\nSon variables que dan cuenta de cualidades o condiciones a través de categorías que guardan un orden entre sí.\nVamos a darle una “ojeada” a esta variable\n\nglimpse(concentrado2020$educa_jefe)\n\n chr [1:89006] \"09\" \"08\" \"10\" \"08\" \"10\" \"06\" \"03\" \"08\" \"03\" \"06\" \"03\" \"03\" ...\n - attr(*, \"label\")= chr \"Educación formal del jefe del hogar\"\n - attr(*, \"format.stata\")= chr \"%2s\"\n\n\nEtiquetemos también nuestra variable ordinal\n\nconcentrado2020 <-concentrado2020 %>% \n  mutate(educa_jefe=as.numeric(educa_jefe)) %>% \n  set_labels(educa_jefe,\n             labels=c(\"Sin instrucción\", \n                      \"Preescolar\",\n                      \"Primaria incompleta\",\n                      \"Primaria completa\",\n                      \"Secundaria incompleta\",\n                      \"Secundaria completa\",\n                      \"Preparatoria incompleta\",\n                      \"Preparatoria completa\",\n                      \"Profesional incompleta\",\n                      \"Profesional completa\",\n                      \"Posgrado\"))\n\nHoy hacemos la tabla, con las etiquetas y vemos que se ve más bonita:\n\nconcentrado2020 %>%\n  mutate(educa_jefe=as_label(educa_jefe)) %>% \n  tabyl(educa_jefe)\n\n              educa_jefe     n     percent\n         Sin instrucción  6160 0.069208817\n              Preescolar    20 0.000224704\n     Primaria incompleta 14577 0.163775476\n       Primaria completa 15136 0.170055951\n   Secundaria incompleta  2974 0.033413478\n     Secundaria completa 23865 0.268127991\n Preparatoria incompleta  3029 0.034031414\n   Preparatoria completa 10550 0.118531335\n  Profesional incompleta  2535 0.028481226\n    Profesional completa  8474 0.095207065\n                Posgrado  1686 0.018942543\n\n\nPara que no nos salgan las categorías sin datos podemos poner una opción dentro del comando “tabyl()”\n\nconcentrado2020 %>% \n  mutate(educa_jefe=as_label(educa_jefe)) %>% \n  tabyl(educa_jefe, show_missing_levels=F ) %>% # esta opción elimina los valores con 0\n  adorn_totals()  \n\n              educa_jefe     n     percent\n         Sin instrucción  6160 0.069208817\n              Preescolar    20 0.000224704\n     Primaria incompleta 14577 0.163775476\n       Primaria completa 15136 0.170055951\n   Secundaria incompleta  2974 0.033413478\n     Secundaria completa 23865 0.268127991\n Preparatoria incompleta  3029 0.034031414\n   Preparatoria completa 10550 0.118531335\n  Profesional incompleta  2535 0.028481226\n    Profesional completa  8474 0.095207065\n                Posgrado  1686 0.018942543\n                   Total 89006 1.000000000"
  },
  {
    "objectID": "P3.html#bivariado-cualitativo",
    "href": "P3.html#bivariado-cualitativo",
    "title": "3  Análisis descriptivo básico",
    "section": "3.5 Bivariado cualitativo",
    "text": "3.5 Bivariado cualitativo\n\n3.5.1 Cálculo de frecuencias\nLas tablas de doble entrada tiene su nombre porque en las columnas entran los valores de una variable categórica, y en las filas de una segunda. Basicamente es como hacer un conteo de todas las combinaciones posibles entre los valores de una variable con la otra.\nPor ejemplo, si quisiéramos combinar las dos variables que ya estudiamos lo podemos hacer, con una tabla de doble entrada:\n\nconcentrado2020 %>% \n  mutate(clase_hog=as_label(clase_hog)) %>% \n  mutate(sexo_jefe=as_label(sexo_jefe)) %>% # para que las lea como factor\n                tabyl(clase_hog, sexo_jefe, show_missing_levels=F ) %>% # incluimos aquí \n                adorn_totals()  \n\n    clase_hog Hombre Mujer\n  unipersonal   6010  4832\n      nuclear  43151 12188\n     ampliado  13410  8409\n    compuesto    477   240\n corresidente    182   107\n        Total  63230 25776\n\n\nObservamos que en cada celda confluyen los casos que comparten las mismas características:\n\nconcentrado2020 %>%   \n    count(clase_hog==1 & sexo_jefe==1) # nos da la segunda celda de la izquierda\n\n# A tibble: 2 × 2\n  `clase_hog == 1 & sexo_jefe == 1`     n\n  <lgl>                             <int>\n1 FALSE                             82996\n2 TRUE                               6010\n\n\n\n\n3.5.2 Totales y porcentajes\nDe esta manera se colocan todos los datos. Si observa al poner la función “adorn_totals()” lo agregó como una nueva fila de totales, pero también podemos pedirle que agregue una columna de totales.\n\nconcentrado2020 %>% \n  mutate(clase_hog=as_label(clase_hog)) %>% \n  mutate(sexo_jefe=as_label(sexo_jefe)) %>% # para que las lea como factor\n  tabyl(clase_hog, sexo_jefe, show_missing_levels=F ) %>% # incluimos aquí dos variables\n  adorn_totals(\"col\")  \n\n    clase_hog Hombre Mujer Total\n  unipersonal   6010  4832 10842\n      nuclear  43151 12188 55339\n     ampliado  13410  8409 21819\n    compuesto    477   240   717\n corresidente    182   107   289\n\n\nO bien agregar los dos, introduciendo en el argumento “c(”col”, “row”)” un vector de caracteres de las dos opciones requeridas:\n\nconcentrado2020 %>% \n  mutate(clase_hog=as_label(clase_hog)) %>% \n  mutate(sexo_jefe=as_label(sexo_jefe)) %>% # para que las lea como factor\n  tabyl(clase_hog, sexo_jefe, show_missing_levels=F ) %>% # incluimos aquí dos variable\n  adorn_totals(c(\"col\", \"row\")) \n\n    clase_hog Hombre Mujer Total\n  unipersonal   6010  4832 10842\n      nuclear  43151 12188 55339\n     ampliado  13410  8409 21819\n    compuesto    477   240   717\n corresidente    182   107   289\n        Total  63230 25776 89006\n\n\nDel mismo modo, podemos calcular los porcentajes. Pero los podemos calcular de tres formas. Uno es que lo calculemos para los totales calculados para las filas, para las columnas o para el gran total poblacional.\nPara columnas tenemos el siguiente código y los siguientes resultados:\n\nconcentrado2020 %>% \n  mutate(clase_hog=as_label(clase_hog)) %>% \n  mutate(sexo_jefe=as_label(sexo_jefe)) %>% # para que las lea como factor\n  tabyl(clase_hog, sexo_jefe, show_missing_levels=F ) %>% # incluimos aquí dos variable\n  adorn_totals(c(\"col\", \"row\")) %>% \n  adorn_percentages(\"col\") %>% # Divide los valores entre el total de la columna\n  adorn_pct_formatting() # lo vuelve porcentaje\n\n    clase_hog Hombre  Mujer  Total\n  unipersonal   9.5%  18.7%  12.2%\n      nuclear  68.2%  47.3%  62.2%\n     ampliado  21.2%  32.6%  24.5%\n    compuesto   0.8%   0.9%   0.8%\n corresidente   0.3%   0.4%   0.3%\n        Total 100.0% 100.0% 100.0%\n\n\nCuando se hagan cuadros de distribuciones (que todas sus partes suman 100), los porcentajes pueden ser una gran ayuda para la interpretación, sobre todos cuando se comparar poblaciones de categorías de diferente tamaño. Por lo general, queremos que los cuadros nos den información de donde están los totales y su 100%, de esta manera el lector se puede guiar de porcentaje con respecto a qué está leyendo. En este caso, vemos que el 100% es común en la última fila.\nVeamos la diferencia de cómo podemos leer la misma celda, pero hoy, hemos calculado los porcentajes a nivel de fila:\n\nconcentrado2020 %>% \n  mutate(clase_hog=as_label(clase_hog)) %>% \n  mutate(sexo_jefe=as_label(sexo_jefe)) %>% # para que las lea como factor\n  tabyl(clase_hog, sexo_jefe, show_missing_levels=F ) %>% # incluimos aquí dos variable\n  adorn_totals(c(\"col\", \"row\")) %>% \n  adorn_percentages(\"row\") %>% # Divide los valores entre el total de la fila\n  adorn_pct_formatting() # lo vuelve porcentaje\n\n    clase_hog Hombre Mujer  Total\n  unipersonal  55.4% 44.6% 100.0%\n      nuclear  78.0% 22.0% 100.0%\n     ampliado  61.5% 38.5% 100.0%\n    compuesto  66.5% 33.5% 100.0%\n corresidente  63.0% 37.0% 100.0%\n        Total  71.0% 29.0% 100.0%\n\n\nFinalmente, podemos calcular los porcentajes con referencia a la población total en análisis. Es decir la celda en la esquina inferior derecha de nuestra tabla original.\n\nconcentrado2020 %>% \n  mutate(clase_hog=as_label(clase_hog)) %>% \n  mutate(sexo_jefe=as_label(sexo_jefe)) %>% # para que las lea como factor\n  tabyl(clase_hog, sexo_jefe, show_missing_levels=F ) %>% # incluimos aquí dos variable\n  adorn_totals(c(\"col\", \"row\")) %>% \n  adorn_percentages(\"all\") %>% # Divide los valores entre el total de la población\n  adorn_pct_formatting() # lo vuelve porcentaje\n\n    clase_hog Hombre Mujer  Total\n  unipersonal   6.8%  5.4%  12.2%\n      nuclear  48.5% 13.7%  62.2%\n     ampliado  15.1%  9.4%  24.5%\n    compuesto   0.5%  0.3%   0.8%\n corresidente   0.2%  0.1%   0.3%\n        Total  71.0% 29.0% 100.0%"
  },
  {
    "objectID": "P3.html#descriptivos-para-variables-cuantitativas",
    "href": "P3.html#descriptivos-para-variables-cuantitativas",
    "title": "3  Análisis descriptivo básico",
    "section": "3.6 Descriptivos para variables cuantitativas",
    "text": "3.6 Descriptivos para variables cuantitativas\nVamos a empezar a revisar los gráficos para variables cuantitativas.\n\n3.6.1 Medidas numéricas básicas\n5 números\n\nsummary(concentrado2020$ing_cor) ## ingresos\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n       0    21392    35172    47838    57640 10702107 \n\n\nCon pipes se pueden crear “indicadores” de nuestras variables es un tibble\n\nconcentrado2020 %>% \n  summarise(nombre_indicador=mean(ing_cor, na.rm=T))\n\n# A tibble: 1 × 1\n  nombre_indicador\n             <dbl>\n1           47838.\n\n\n\n\n3.6.2 Histograma básico\n\nhist(concentrado2020$ing_cor)\n\n\n\n\nLe podemos modificar el título del eje de las x y de las y\n\nhist(concentrado2020$ing_cor, \n     main=\"Histograma de los ingresos corrientes\", \n     xlab=\"pesos mexicanos\", ylab=\"Frecuencia\") \n\n\n\n\n¡A ponerle colorcitos! Aquí hay una lista http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf\n\nhist(concentrado2020$ing_cor, \n     main=\"Histograma de los ingresos corrientes\", \n     xlab=\"pesos mexicanos\", ylab=\"Frecuencia\",\n     col=\"deeppink1\") \n\n\n\n\nCon pipes:\n\nconcentrado2020 %>% \n    with(hist(ing_cor)) # con with, para que entienda\n\n\n\n\nCuando usamos pipes, se debe de recordar que no es necesario escribir el nombre del data.frame en el filtro porque es lo primero que colocamos en nuestro “pipe”.\nCheca que cualquier aditamiento debe ir en el pipe donde está el comando de hist(). Ten cuidado con los paréntesis.\n\nconcentrado2020 %>% \n  filter(!is.na(ing_cor)) %>% # la ventaja de esta forma es que podemos hacer más operaciones\n    with(hist(ing_cor, main= \"histograma\"))"
  },
  {
    "objectID": "P4.html",
    "href": "P4.html",
    "title": "4  Factores de expansión y algunas otras medidas",
    "section": "",
    "text": "if (!require(\"pacman\")) install.packages(\"pacman\")#instala pacman si se requiere\n\nLoading required package: pacman\n\npacman::p_load(tidyverse,\n               readxl,\n               writexl, \n               haven,\n               sjlabelled, \n               janitor,\n               magrittr,\n               GGally,\n               wesanderson,\n               gt,\n               srvyr,\n               dineq\n)"
  },
  {
    "objectID": "P4.html#cargando-los-datos",
    "href": "P4.html#cargando-los-datos",
    "title": "4  Factores de expansión y algunas otras medidas",
    "section": "4.2 Cargando los datos",
    "text": "4.2 Cargando los datos\nDesde STATA y haremos unos cambios…\n\nconcentrado2020 <- read_dta(\"datos/concentrado2020.dta\") %>% \n  mutate(across(c(sexo_jefe, clase_hog, educa_jefe), as.numeric)) %>% # ojo aquí\n  set_labels(sexo_jefe, labels=c(\"Hombre\", \"Mujer\")) %>% \n  set_labels(clase_hog, labels=c(\"unipersonal\",\"nuclear\", \"ampliado\",\n                                 \"compuesto\",\"corresidente\"))   %>% \n   set_labels(educa_jefe,\n             labels=c(\"Sin instrucción\", \n                      \"Preescolar\",\n                      \"Primaria incompleta\",\n                      \"Primaria completa\",\n                      \"Secundaria incompleta\",\n                      \"Secundaria completa\",\n                      \"Preparatoria incompleta\",\n                      \"Preparatoria completa\",\n                      \"Profesional incompleta\",\n                      \"Profesional completa\",\n                      \"Posgrado\"))"
  },
  {
    "objectID": "P4.html#la-función-tally",
    "href": "P4.html#la-función-tally",
    "title": "4  Factores de expansión y algunas otras medidas",
    "section": "4.3 La función tally",
    "text": "4.3 La función tally\nEl comando “tabyl()” del paquete “janitor” es muy útil pero no es compatible con los factores del expansión. En realidad, tabyl() nos ahorra un poco el hecho de tener que agrupar nuestra base en categorías y luego hacer un conteo para cada una de ellas. “tally()” es un comando que nos hace ese conteo y “group_by” nos agrupa las observaciones de nuestra base de datos para hacer cualquier operación.\n\nconcentrado2020 %>% \n group_by(as_label(sexo_jefe)) %>% \n  tally(factor) %>% #nombre del factor\n  adorn_totals()  # Agrega total\n\n as_label(sexo_jefe)        n\n              Hombre 25072652\n               Mujer 10677007\n               Total 35749659\n\n\nPodemos usar funciones de tabyl\n\nconcentrado2020 %>% \n group_by(as_label(sexo_jefe)) %>% \n  tally(factor) %>% #nombre del factor\n  adorn_totals() %>% # Agrega total\n  adorn_percentages(\"all\")  %>% \n  adorn_pct_formatting()\n\n as_label(sexo_jefe)      n\n              Hombre  70.1%\n               Mujer  29.9%\n               Total 100.0%"
  },
  {
    "objectID": "P4.html#otras-formas",
    "href": "P4.html#otras-formas",
    "title": "4  Factores de expansión y algunas otras medidas",
    "section": "4.4 Otras formas",
    "text": "4.4 Otras formas\nLa función “count()” también permite dar pesos\n\nconcentrado2020 %>% \n  count(sexo_jefe, clase_hog,  wt = factor) \n\n# A tibble: 10 × 3\n   sexo_jefe clase_hog        n\n       <dbl>     <dbl>    <dbl>\n 1         1         1  2288234\n 2         1         2 17103678\n 3         1         3  5408464\n 4         1         4   179580\n 5         1         5    92696\n 6         2         1  1944813\n 7         2         2  4989763\n 8         2         3  3591323\n 9         2         4    98773\n10         2         5    52335\n\n\nEs compatible con etiquetas\n\nconcentrado2020 %>% \n  count(as_label(sexo_jefe), as_label(clase_hog),  wt = factor) \n\n# A tibble: 10 × 3\n   `as_label(sexo_jefe)` `as_label(clase_hog)`        n\n   <fct>                 <fct>                    <dbl>\n 1 Hombre                unipersonal            2288234\n 2 Hombre                nuclear               17103678\n 3 Hombre                ampliado               5408464\n 4 Hombre                compuesto               179580\n 5 Hombre                corresidente             92696\n 6 Mujer                 unipersonal            1944813\n 7 Mujer                 nuclear                4989763\n 8 Mujer                 ampliado               3591323\n 9 Mujer                 compuesto                98773\n10 Mujer                 corresidente             52335\n\n\nPodemos mover un poquito con pivot_wider para que se vea más a lo que acostumbramos a una tabla de frecuencias\n\nconcentrado2020 %>% \n  mutate_at(vars(sexo_jefe, clase_hog), as_label) %>% \n  count(sexo_jefe, clase_hog,  wt = factor) %>% \n  tidyr::pivot_wider(names_from = sexo_jefe, \n              values_from = n)\n\n# A tibble: 5 × 3\n  clase_hog      Hombre   Mujer\n  <fct>           <dbl>   <dbl>\n1 unipersonal   2288234 1944813\n2 nuclear      17103678 4989763\n3 ampliado      5408464 3591323\n4 compuesto      179580   98773\n5 corresidente    92696   52335\n\n\n\nconcentrado2020 %>% \n  mutate_at(vars(sexo_jefe, clase_hog), as_label) %>% # otra forma de mutate y as_label\n  count(sexo_jefe, clase_hog,  wt = factor) %>% \n  pivot_wider(names_from = sexo_jefe, \n              values_from = n) %>%\n  adorn_totals() %>% # Agrega total\n  adorn_percentages(\"col\")  %>% \n  adorn_pct_formatting()\n\n    clase_hog Hombre  Mujer\n  unipersonal   9.1%  18.2%\n      nuclear  68.2%  46.7%\n     ampliado  21.6%  33.6%\n    compuesto   0.7%   0.9%\n corresidente   0.4%   0.5%\n        Total 100.0% 100.0%"
  },
  {
    "objectID": "P4.html#diseño-complejo",
    "href": "P4.html#diseño-complejo",
    "title": "4  Factores de expansión y algunas otras medidas",
    "section": "4.5 Diseño complejo",
    "text": "4.5 Diseño complejo\nHay muchos diseños muestrales, asumiremos el diseño simple, pero hay que revisar la documentación de la base\n\n# Muestreo aleatorio\nags_srvy <- concentrado2020 %>%\n  as_survey_design(weights = factor)\n\nSi revisamos las encuestas tiene un diseño complejo, hay estratos y unidades primarias de muestreo\n\n# Muestreo estratificado\nags_srvy <- concentrado2020 %>%\n  as_survey_design(\n    upm = upm,\n    strata = est_dis,\n    weights = factor,\n    nest = TRUE)\n\nComo vemos esto es un archivo bien grande, por lo que mejor vamos a seleccionar un par de variables:\n\n# simple random sample\nags_srvy <- concentrado2020 %>%\n  select(upm, est_dis, factor, clase_hog,\n         sexo_jefe, edad_jefe, educa_jefe,ing_cor, factor) %>% \n  as_survey_design(\n    upm=upm,\n    strata = est_dis,\n    weights = factor,\n    nest = TRUE)\n\nPara una media ponderada\n\nags_srvy %>%\n  filter(ing_cor>0) %>% # sólo con ingresos\n  summarise(\n    media_ponderada = survey_mean(ing_cor, na.rm=T))\n\n# A tibble: 1 × 2\n  media_ponderada media_ponderada_se\n            <dbl>              <dbl>\n1          50315.               341.\n\n\nSi queremos los intervalos de confianza (spoiler):\n\nags_srvy %>%\n  summarize(\n    media_ponderada = survey_mean(ing_cor,\n                                  vartype = \"ci\") )\n\n# A tibble: 1 × 3\n  media_ponderada media_ponderada_low media_ponderada_upp\n            <dbl>               <dbl>               <dbl>\n1          50309.              49640.              50979.\n\n\n\nags_srvy %>%\n  summarize(\n    mediana_ponderada = survey_median(ing_cor,\n                                  vartype = \"ci\") )\n\n# A tibble: 1 × 3\n  mediana_ponderada mediana_ponderada_low mediana_ponderada_upp\n              <dbl>                 <dbl>                 <dbl>\n1            36624.                36365.                36882.\n\n\n\nags_srvy %>%\n  mutate(sexo_jefe=as_label(sexo_jefe)) %>% \n  group_by(sexo_jefe) %>% #variables cuali\n  summarize(proportion = survey_mean(), # proporción\n            total = survey_total() ) # totales\n\n# A tibble: 2 × 5\n  sexo_jefe proportion proportion_se    total total_se\n  <fct>          <dbl>         <dbl>    <dbl>    <dbl>\n1 Hombre         0.701       0.00217 25072652   80320.\n2 Mujer          0.299       0.00217 10677007   77840."
  },
  {
    "objectID": "P4.html#creación-de-quintiles-y-otros-grupos",
    "href": "P4.html#creación-de-quintiles-y-otros-grupos",
    "title": "4  Factores de expansión y algunas otras medidas",
    "section": "4.6 Creación de quintiles y otros grupos",
    "text": "4.6 Creación de quintiles y otros grupos\nUno de los elementos más comunes es crear grupos. Por ejemplo, la función cut, nos ayuda a crear variables con ciertos cortes. Por ejemplo, para recodificar por grupos etarios\n\nconcentrado2020 %<>% \n  mutate(grupo=cut(edad_jefe,\n                   breaks=c(0, 25, 50, 75, 100)))\n  \n       \nconcentrado2020 %>% \n  tabyl(grupo)\n\n    grupo     n      percent valid_percent\n   (0,25]  3327 0.0373795025    0.03738328\n  (25,50] 42558 0.4781475406    0.47819589\n  (50,75] 36085 0.4054221064    0.40546311\n (75,100]  7027 0.0789497337    0.07895772\n     <NA>     9 0.0001011168            NA\n\n\nAlgunas opciones se pueden modificar dentro de la función cut\n\nconcentrado2020 %<>% \n  mutate(grupo=cut(edad_jefe,\n                   breaks=c(0, 25, 50, 75, 100),\n                   include.lowest=T,\n                   right= F))\n  \n       \nconcentrado2020 %>% \n  tabyl(grupo)\n\n    grupo     n      percent valid_percent\n   [0,25)  2502 0.0281104645    0.02811331\n  [25,50) 41068 0.4614070962    0.46145376\n  [50,75) 37488 0.4211850886    0.42122768\n [75,100]  7939 0.0891962340    0.08920525\n     <NA>     9 0.0001011168            NA\n\n\nEsto nos puede ayudar para hacer variables de rangos de cualquier tipo.\nOtro tipo de variables muy importante son los quintiles y demás.\n\nconcentrado2020 %<>%\n  mutate(quintil0=ntile(ing_cor, n=5))\n\nconcentrado2020 %>% \n  tabyl(quintil0)\n\n quintil0     n   percent\n        1 17802 0.2000090\n        2 17801 0.1999978\n        3 17801 0.1999978\n        4 17801 0.1999978\n        5 17801 0.1999978\n\n\nPero quizás nos interesa más los quintiles que toman en cuenta el factor de expansión\n\nconcentrado2020 %<>%\n  mutate(quintil1=dineq::ntiles.wtd(ing_cor, n=5, weights=factor))\n\nconcentrado2020 %>% \n  tabyl(quintil1)\n\n quintil1     n   percent\n        1 19133 0.2149630\n        2 18253 0.2050761\n        3 17803 0.2000202\n        4 17609 0.1978406\n        5 16208 0.1821001\n\nconcentrado2020 %>% \n  count(quintil1, wt=factor) %>% \n  mutate(p=n/sum(n)*100) %>%\n  adorn_totals()\n\n quintil1        n         p\n        1  7150004  20.00020\n        2  7150151  20.00061\n        3  7149344  19.99836\n        4  7150470  20.00151\n        5  7149690  19.99932\n    Total 35749659 100.00000\n\n\nPodemos también ver la diferencia en los máximos y minimos de ambas variables\n\nconcentrado2020 %>% \n  group_by(quintil0) %>% \n  summarise(min=min(ing_cor),\n            max=max(ing_cor))\n\n# A tibble: 5 × 3\n  quintil0    min       max\n     <int>  <dbl>     <dbl>\n1        1     0     18934.\n2        2 18935.    29188.\n3        3 29188.    42257.\n4        4 42257.    65267.\n5        5 65268. 10702107.\n\n\nVeamos con la ponderación:\n\nconcentrado2020 %>% \n  group_by(quintil1) %>% \n  summarise(min=min(ing_cor),\n            max=max(ing_cor))\n\n# A tibble: 5 × 3\n  quintil1    min       max\n     <dbl>  <dbl>     <dbl>\n1        1     0     19666.\n2        2 19668.    30326.\n3        3 30326.    44017.\n4        4 44017.    68533.\n5        5 68534. 10702107.\n\n\nLa flexibilidad de dplyr nos permite además hacer quintiles fácilmente adentro de grupos. Por ejemplo si quisiéramos hacer quintiles estatales… Claro para eso debemos tener la variable.\nLa variable “ubica_geo”, nos da esa información pero junta\n\nconcentrado2020 %>% \n  select(ubica_geo) %>% \n  head\n\n# A tibble: 6 × 1\n  ubica_geo\n  <chr>    \n1 01001    \n2 01001    \n3 01001    \n4 01001    \n5 01001    \n6 01001    \n\n\nVamos a crear dos variables, uan que nos diga la entidad y la otra el municipio\n\nconcentrado2020 %<>%\n  mutate(ent=stringr::str_sub(ubica_geo, start = 1, end = 2)) %>% \n  mutate(mun=stringr::str_sub(ubica_geo, start = 3, end = 5))\n\nconcentrado2020 %>% tabyl(ent)\n\n ent    n    percent\n  01 2669 0.02998674\n  02 4142 0.04653619\n  03 2717 0.03052603\n  04 2174 0.02442532\n  05 3922 0.04406445\n  06 3282 0.03687392\n  07 2123 0.02385232\n  08 4572 0.05136732\n  09 2570 0.02887446\n  10 2746 0.03085185\n  11 3083 0.03463811\n  12 2490 0.02797564\n  13 2213 0.02486349\n  14 2779 0.03122261\n  15 3568 0.04008719\n  16 2047 0.02299845\n  17 2564 0.02880705\n  18 2103 0.02362762\n  19 3502 0.03934566\n  20 2596 0.02916657\n  21 2141 0.02405456\n  22 3769 0.04234546\n  23 2196 0.02467249\n  24 2521 0.02832393\n  25 3429 0.03852549\n  26 2420 0.02718918\n  27 2088 0.02345909\n  28 2311 0.02596454\n  29 2159 0.02425679\n  30 2717 0.03052603\n  31 2889 0.03245849\n  32 2504 0.02813293\n\nconcentrado2020 %>% tabyl(mun)\n\n mun    n      percent\n 001 4929 5.537829e-02\n 002 4164 4.678336e-02\n 003 3196 3.590769e-02\n 004 3636 4.085118e-02\n 005 3578 4.019954e-02\n 006 3230 3.628969e-02\n 007 3069 3.448082e-02\n 008 2271 2.551513e-02\n 009 1779 1.998742e-02\n 010 2050 2.303216e-02\n 011 1819 2.043682e-02\n 012 1738 1.952677e-02\n 013 1317 1.479676e-02\n 014 2189 2.459385e-02\n 015  855 9.606094e-03\n 016 1022 1.148237e-02\n 017 2582 2.900928e-02\n 018 1436 1.613374e-02\n 019 1277 1.434735e-02\n 020 1733 1.947060e-02\n 021  963 1.081950e-02\n 022  601 6.752354e-03\n 023  355 3.988495e-03\n 024  569 6.392827e-03\n 025  716 8.044402e-03\n 026  606 6.808530e-03\n 027  925 1.039256e-02\n 028 1017 1.142620e-02\n 029  882 9.909444e-03\n 030 1851 2.079635e-02\n 031  853 9.583624e-03\n 032  889 9.988091e-03\n 033 1339 1.504393e-02\n 034  407 4.572725e-03\n 035 1637 1.839202e-02\n 036  467 5.246837e-03\n 037 1695 1.904366e-02\n 038  789 8.864571e-03\n 039 1434 1.611127e-02\n 040  309 3.471676e-03\n 041  756 8.493809e-03\n 042  402 4.516549e-03\n 043  445 4.999663e-03\n 044  337 3.786262e-03\n 045  269 3.022268e-03\n 046  524 5.887244e-03\n 047  259 2.909916e-03\n 048  634 7.123115e-03\n 049  234 2.629036e-03\n 050 1125 1.263960e-02\n 051  427 4.797429e-03\n 052  340 3.819967e-03\n 053  593 6.662472e-03\n 054  266 2.988563e-03\n 055  557 6.258005e-03\n 056  437 4.909781e-03\n 057  320 3.595263e-03\n 058  289 3.246972e-03\n 059  240 2.696447e-03\n 060  143 1.606633e-03\n 061  206 2.314451e-03\n 062  252 2.831270e-03\n 063  232 2.606566e-03\n 064  167 1.876278e-03\n 065  203 2.280745e-03\n 066  146 1.640339e-03\n 067  381 4.280610e-03\n 068   91 1.022403e-03\n 069  246 2.763859e-03\n 070   83 9.325214e-04\n 071  157 1.763926e-03\n 072   60 6.741119e-04\n 073  251 2.820035e-03\n 074  147 1.651574e-03\n 075   38 4.269375e-04\n 076  306 3.437970e-03\n 077  159 1.786396e-03\n 078  127 1.426870e-03\n 079  277 3.112150e-03\n 080   21 2.359392e-04\n 081   70 7.864638e-04\n 082  157 1.763926e-03\n 083  157 1.763926e-03\n 084   89 9.999326e-04\n 085  181 2.033571e-03\n 086   92 1.033638e-03\n 087  257 2.887446e-03\n 088   77 8.651102e-04\n 089  237 2.662742e-03\n 090   41 4.606431e-04\n 091  119 1.336989e-03\n 092   78 8.763454e-04\n 093   81 9.100510e-04\n 094   63 7.078175e-04\n 095   23 2.584095e-04\n 096  176 1.977395e-03\n 097  356 3.999730e-03\n 098  263 2.954857e-03\n 099  140 1.572928e-03\n 100   94 1.056109e-03\n 101  537 6.033301e-03\n 102  359 4.033436e-03\n 104  222 2.494214e-03\n 105  222 2.494214e-03\n 106  308 3.460441e-03\n 107  125 1.404400e-03\n 108  364 4.089612e-03\n 109  114 1.280813e-03\n 110   64 7.190526e-04\n 111   95 1.067344e-03\n 112   92 1.033638e-03\n 113   83 9.325214e-04\n 114  639 7.179291e-03\n 115  123 1.381929e-03\n 116   16 1.797632e-04\n 117   23 2.584095e-04\n 118   65 7.302878e-04\n 119   34 3.819967e-04\n 120  381 4.280610e-03\n 121  120 1.348224e-03\n 122   49 5.505247e-04\n 123   76 8.538750e-04\n 124  110 1.235872e-03\n 125   29 3.258207e-04\n 127   21 2.359392e-04\n 128   59 6.628767e-04\n 129   24 2.696447e-04\n 130   34 3.819967e-04\n 131   70 7.864638e-04\n 132   80 8.988158e-04\n 133   32 3.595263e-04\n 134   20 2.247040e-04\n 135    8 8.988158e-05\n 136   24 2.696447e-04\n 138   22 2.471743e-04\n 140   36 4.044671e-04\n 141  109 1.224637e-03\n 142   20 2.247040e-04\n 143   25 2.808799e-04\n 144   64 7.190526e-04\n 145   42 4.718783e-04\n 149   18 2.022336e-04\n 153   24 2.696447e-04\n 154   42 4.718783e-04\n 156   96 1.078579e-03\n 157    7 7.864638e-05\n 160   66 7.415230e-04\n 163   44 4.943487e-04\n 164   35 3.932319e-04\n 167   23 2.584095e-04\n 169   24 2.696447e-04\n 170   63 7.078175e-04\n 171   33 3.707615e-04\n 173   58 6.516415e-04\n 174   43 4.831135e-04\n 175   72 8.089342e-04\n 176   24 2.696447e-04\n 177   22 2.471743e-04\n 179   23 2.584095e-04\n 181   17 1.909984e-04\n 183   38 4.269375e-04\n 184  159 1.786396e-03\n 186   20 2.247040e-04\n 187   20 2.247040e-04\n 188   19 2.134688e-04\n 189   73 8.201694e-04\n 191   16 1.797632e-04\n 193  161 1.808867e-03\n 194   22 2.471743e-04\n 197   21 2.359392e-04\n 199   21 2.359392e-04\n 200   24 2.696447e-04\n 201   83 9.325214e-04\n 202   43 4.831135e-04\n 204   21 2.359392e-04\n 205   23 2.584095e-04\n 206   42 4.718783e-04\n 208   43 4.831135e-04\n 212   14 1.572928e-04\n 227    5 5.617599e-05\n 234   20 2.247040e-04\n 261   23 2.584095e-04\n 266   20 2.247040e-04\n 271   16 1.797632e-04\n 277   39 4.381727e-04\n 278   47 5.280543e-04\n 293   16 1.797632e-04\n 295   22 2.471743e-04\n 302   22 2.471743e-04\n 309   20 2.247040e-04\n 315   19 2.134688e-04\n 318   42 4.718783e-04\n 324  143 1.606633e-03\n 334   66 7.415230e-04\n 348   24 2.696447e-04\n 349   21 2.359392e-04\n 350   11 1.235872e-04\n 364   23 2.584095e-04\n 365   15 1.685280e-04\n 372   18 2.022336e-04\n 385   70 7.864638e-04\n 390   20 2.247040e-04\n 394   20 2.247040e-04\n 397   16 1.797632e-04\n 399   11 1.235872e-04\n 401   21 2.359392e-04\n 403    5 5.617599e-05\n 406   33 3.707615e-04\n 413   42 4.718783e-04\n 418   48 5.392895e-04\n 439   41 4.606431e-04\n 441   24 2.696447e-04\n 447   22 2.471743e-04\n 460   21 2.359392e-04\n 466   20 2.247040e-04\n 467   25 2.808799e-04\n 469   37 4.157023e-04\n 482   22 2.471743e-04\n 483   22 2.471743e-04\n 491   21 2.359392e-04\n 504   22 2.471743e-04\n 515   21 2.359392e-04\n 539   19 2.134688e-04\n 546   21 2.359392e-04\n 551   43 4.831135e-04\n 553    9 1.011168e-04\n 559   43 4.831135e-04\n 570   46 5.168191e-04\n\n\nHoy sí podemos hacer nuestras variables dentro de cada entidad federativa\n\nconcentrado2020 %<>%\n  group_by(ent) %>% \n  mutate(quintil2=dineq::ntiles.wtd(ing_cor, n=5, weights=factor)) %>% \n  ungroup()\n\n¿Discreparán muchos los hogares en sus distribuciones a nivel nacional y por entidad?\n\n\n\n\nconcentrado2020 %>% \n  tabyl(quintil1,quintil2) %>% \n  adorn_totals(c(\"row\", \"col\"))\n\n quintil1     1     2     3     4     5 Total\n        1 15878  3088   167     0     0 19133\n        2  4413 10071  3503   266     0 18253\n        3     0  5583  8917  3221    82 17803\n        4     0     0  5089 10301  2219 17609\n        5     0     0     0  2969 13239 16208\n    Total 20291 18742 17676 16757 15540 89006\n\n\nY si queremos este tabulado más bonito\n\nconcentrado2020 %>% \n  tabyl(quintil1,quintil2) %>% \n  adorn_totals(c(\"row\", \"col\")) %>% \n  gt()\n\n\n\n\n\n  \n  \n    \n      quintil1\n      1\n      2\n      3\n      4\n      5\n      Total\n    \n  \n  \n    1\n15878\n3088\n167\n0\n0\n19133\n    2\n4413\n10071\n3503\n266\n0\n18253\n    3\n0\n5583\n8917\n3221\n82\n17803\n    4\n0\n0\n5089\n10301\n2219\n17609\n    5\n0\n0\n0\n2969\n13239\n16208\n    Total\n20291\n18742\n17676\n16757\n15540\n89006"
  }
]