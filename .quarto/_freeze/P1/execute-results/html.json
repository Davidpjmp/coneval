{
  "hash": "f0a3be818c1a8643536896abd95f0cdc",
  "result": {
    "markdown": "# Primer acercamiento al uso del programa\n\n## Introducción\n\nEn RStudio podemos tener varias ventanas que nos permiten tener más control de nuestro \"ambiente\", el historial, los \"scripts\" o códigos que escribimos y por supuesto, tenemos nuestra consola, que también tiene el símbolo \"\\>\" con R. Podemos pedir operaciones básicas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\n5*3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\n#Para escribir comentarios y que no los lea como operaciones ponemos el símbolo de gato\n# Lo podemos hacer para un comentario en una línea o la par de una instrucción\n1:5               # Secuencia 1-5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nseq(1, 10, 0.5)   # Secuencia con incrementos diferentes a 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n```\n:::\n\n```{.r .cell-code}\nc('a','b','c')  # Vector con caracteres\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n\n```{.r .cell-code}\n1:7             # Entero\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6 7\n```\n:::\n\n```{.r .cell-code}\n40<80           # Valor logico\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n2+2 == 5        # Valor logico\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nT == TRUE       # T expresion corta de verdadero\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nR es un lenguaje de programación por objetos. Por lo cual vamos a tener objetos a los que se les asigna su contenido. Si usamos una flechita \"\\<-\" o \"-\\>\" le estamos asignando algo al objeto que apunta la felcha.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 24         # Asignacion de valor 24 a la variable x para su uso posterior (OBJETO)\nx/2             # Uso posterior de variable u objeto x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\nx               # Imprime en pantalla el valor de la variable u objeto\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n\n```{.r .cell-code}\nx <- TRUE       # Asigna el valor logico TRUE a la variable x OJO: x toma el ultimo valor que se le asigna\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Vectores\n\nLos vectores son uno de los objetos más usados en R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(2,4,6)     # Vector numerico\ny <- c('Primaria', 'Secundaria') # Vector caracteres\n```\n:::\n\n\nDado que poseen elementos, podemos también observar y hacer operaciones con sus elementos, usando \"\\[ \\]\" para acceder a ellos\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny[2]              # Acceder al segundo valor del vector y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Secundaria\"\n```\n:::\n\n```{.r .cell-code}\ny[3] <- 'Preparatoria y más' # Asigna valor a la tercera componente del vector\nsex <-1:2         # Asigna a la variable sex los valores 1 y 2\nnames(sex) <- c(\"Femenino\", \"Masculino\") # Asigna nombres al vector de elementos sexo\nsex[2]            # Segundo elemento del vector sex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMasculino \n        2 \n```\n:::\n:::\n\n\n## Matrices\n\nLas matrices son muy importantes, porque nos permiten hacer operaciones y casi todas nuestras bases de datos tendran un aspecto de matriz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix (nrow=2, ncol=3, 1:6, byrow = TRUE) # Matrices Ejemplo 1\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n:::\n\n```{.r .cell-code}\nm <- matrix (nrow=2, ncol=3, 1:6, byrow = FALSE) # Matrices Ejemplo 1\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\ndim(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n\n```{.r .cell-code}\nattributes(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$dim\n[1] 2 3\n```\n:::\n\n```{.r .cell-code}\nn <- 1:6     # Matrices Ejemplo 2\ndim(n) <- c(2,3)\nn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nxx <-10:12   # Matrices Ejemplo 3\nyy<-14:16\ncbind(xx,yy) # Une vectores por Columnas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     xx yy\n[1,] 10 14\n[2,] 11 15\n[3,] 12 16\n```\n:::\n\n```{.r .cell-code}\nrbind(xx,yy) # Une vectores por Renglones\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [,1] [,2] [,3]\nxx   10   11   12\nyy   14   15   16\n```\n:::\n\n```{.r .cell-code}\nmi_matrix<-cbind(xx,yy) # este resultado lo puedo asignar a un objeto\n```\n:::\n\n\n## Funciones\n\nAlgunas funciones básicas son las siguientes. Vamos a ir viendo más funciones, pero para entender cómo funcionan, haremos unos ejemplos y cómo pedir ayuda sobre ellas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum (10,20,30)    # Función suma\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60\n```\n:::\n\n```{.r .cell-code}\nrep('R', times=3) # Repite la letra R el numero de veces que se indica\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R\" \"R\" \"R\"\n```\n:::\n\n```{.r .cell-code}\nsqrt(9)           # Raiz cuadrada de 9\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n## Ayuda\n\nPedir ayuda es indispensable para aprender a escribir nuestros códigos. A prueba y error, es el mejor sistema para aprender. Podemos usar la función help, example y ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(sum)         # Ayuda sobre función sum\nexample(sum)      # Ejemplo de función sum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nsum> ## Pass a vector to sum, and it will add the elements together.\nsum> sum(1:5)\n[1] 15\n\nsum> ## Pass several numbers to sum, and it also adds the elements.\nsum> sum(1, 2, 3, 4, 5)\n[1] 15\n\nsum> ## In fact, you can pass vectors into several arguments, and everything gets added.\nsum> sum(1:2, 3:5)\n[1] 15\n\nsum> ## If there are missing values, the sum is unknown, i.e., also missing, ....\nsum> sum(1:5, NA)\n[1] NA\n\nsum> ## ... unless  we exclude missing values explicitly:\nsum> sum(1:5, NA, na.rm = TRUE)\n[1] 15\n```\n:::\n:::\n\n\n## Mi ambiente\n\nTodos los objetos que hemos declarado hasta ahora son parte de nuestro \"ambiente\" (environment). Para saber qué está en nuestro ambiente usamos el comando\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"m\"         \"mi_matrix\" \"n\"         \"sex\"       \"x\"         \"xx\"       \n[7] \"y\"         \"yy\"       \n```\n:::\n\n```{.r .cell-code}\ngc()           # Garbage collection, reporta memoria en uso\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  605426 32.4    1322098 70.7         NA  1322098 70.7\nVcells 1110202  8.5    8388608 64.0      16384  1839370 14.1\n```\n:::\n:::\n\n\nPara borrar todos nuestros objetos, usamos el siguiente comando, que equivale a usar la escobita de la venta de environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls())  # Borrar objetos actuales\n```\n:::\n\n\n## Directorio de trabajo\n\nEs muy útil saber dónde estamos trabajando y donde queremos trabajar. Por eso podemos utilizar los siguientes comandos para saberlo\n\nOjo, checa, si estás desdes una PC, cómo cambian las \"\" por\"/\" o por \"\\\\\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()           # Directorio actual\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/anaescoto/Dropbox/2022/Curso_r_cnvl/coneval\"\n```\n:::\n\n```{.r .cell-code}\n#setwd(\"C:/Users/anaes/Dropbox/2021/CursoR-posgrado\")# Cambio de directorio\n\nlist.files()      # Lista de archivos en ese directorio\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"01_ppt20221003.pptx\"              \"Icon\\r\"                          \n [3] \"LICENSE\"                          \"Mi_Exportación.xlsx\"             \n [5] \"P1.qmd\"                           \"P1.rmarkdown\"                    \n [7] \"P10.qmd\"                          \"P11.qmd\"                         \n [9] \"P12.qmd\"                          \"P13.qmd\"                         \n[11] \"P14.qmd\"                          \"P15.qmd\"                         \n[13] \"P2.qmd\"                           \"P3.qmd\"                          \n[15] \"P4.R\"                             \"P4.qmd\"                          \n[17] \"P5.R\"                             \"P5.qmd\"                          \n[19] \"P6.qmd\"                           \"P7.qmd\"                          \n[21] \"P8.qmd\"                           \"P9.qmd\"                          \n[23] \"Pendiente.qmd\"                    \"README.md\"                       \n[25] \"_quarto.yml\"                      \"coneval.Rproj\"                   \n[27] \"datos\"                            \"docs\"                            \n[29] \"index.html\"                       \"index.qmd\"                       \n[31] \"instala.html\"                     \"instala.qmd\"                     \n[33] \"intro1.png\"                       \"mapas2.R\"                        \n[35] \"mds.xlsx\"                         \"modelos.xlsx\"                    \n[37] \"pruebas_mapas.R\"                  \"rrefine.R\"                       \n[39] \"site_libs\"                        \"spanish-gsd-ud-2.5-191206.udpipe\"\n[41] \"tabs.xlsx\"                       \n```\n:::\n:::\n\n\nChecar que esto también se puede hacer desde el menú:\n\n![i0](intro1.png)\n\n## Proyectos\n\nPero... a veces preferimos trabajar en proyectos, sobre todo porque nos da más control.\n\nHay gente que lo dice mejor que yo, como Hadley Wickham: <https://es.r4ds.hadley.nz/flujo-de-trabajo-proyectos.html>\n\n## Instalación de paquetes\n\nLos paquetes son útiles para realizar funciones especiales. La especialización de paquetes es más rápida en R que en otros programas por ser un software libre.\n\nVamos a instalar el paquete \"foreign\", como su nombre lo indica, nos permite leer elementos \"extranjeros\" en R. Es sumamente útil porque nos permite leer casi todos los formatos, sin necesidad de usar paquetes especializados como <i>StatTransfer</i>.\n\nPara instalar las paqueterías usamos el siguiente comando \"install.packages()\" Checa que adentro del paréntesis va el nombre de la librería, con comillas.\n\nCon la opción \"dependencies = TRUE\" R nos instalará no sólo la librería o paquete que estamos pidiendo, sino todo aquellos paquetes que necesite la librería en cuestión. Muchas veces los diseños de los paquetes implican el uso de algún otro anterior. Por lo que poner esta sentencia nos puede ahorrar errores cuando estemos usando el paquete. Piensa que esto es similar a cuando enciendes tu computadora y tu sistema operativo te pide que mantengas las actualizaciones.\n\nVamos a instalar dos librerías que nos permiten importar formatos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"foreign\", dependencies = TRUE)\n#install.packages(\"haven\", dependencies = TRUE)\n```\n:::\n\n\nEste proceso no hay que hacerlo siempre. Si no sólo la primera vez. Una vez instalado un paquete de librería, la llamamos con el comando \"library\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(foreign)\nlibrary(haven)\n```\n:::\n\n\n\"foreing\" nos permite leer archivos en formato de dBase, con extensión \".dbf\". Si bien no es un formato muy común para los investigadores, sí para los que generan la información, puesto que dBase es uno de los principales programas de administración de bases de datos.\n\nHe puesto un ejemplo de una base de datos mexicana en dbf, en este formato.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nejemplo_dbf<-read.dbf(\"datos/ejemplo_dbf.DBF\") #checa cómo nos vamos adentro de nuestro directorio\n```\n:::\n\n\n## Paquete pacman\n\nEn general, cuando hacemos nuestro código querremos verificar que nuestras librerías estén instaladas. Si actualizamos nuestro R y Rstudio es probable (sobre todo en MAC) que hayamos perdido alguno.\n\nEste es un ejemplo de un código. Y vamos a introducir un paquete muy útil llamado \"pacman\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\") # instala pacman si se requiere\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: pacman\n```\n:::\n\n```{.r .cell-code}\npacman::p_load(tidyverse, readxl, writexl, haven, sjlabelled, foreign) #carga los paquetes necesarios para esta práctica\n```\n:::\n\n\nHay muchos formatos de almacenamiento de bases de datos. Vamos a aprender a importar información desde ellos.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}